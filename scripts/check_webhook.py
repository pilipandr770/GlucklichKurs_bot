"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook –∑ Telegram Bot
"""
import os
import requests
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BASE_URL = f"https://api.telegram.org/bot{TOKEN}"

def check_webhook():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ—Ç–æ—á–Ω–∏–π webhook"""
    response = requests.get(f"{BASE_URL}/getWebhookInfo")
    data = response.json()
    
    if data["ok"]:
        info = data["result"]
        print("üìã Webhook Info:")
        print(f"  URL: {info.get('url', 'NOT SET')}")
        print(f"  Pending updates: {info.get('pending_update_count', 0)}")
        print(f"  Last error: {info.get('last_error_message', 'None')}")
        return info.get('url', '')
    else:
        print("‚ùå Failed to get webhook info")
        return None

def delete_webhook():
    """–í–∏–¥–∞–ª—è—î webhook —ñ –æ—á–∏—â—É—î pending updates"""
    print("\nüóëÔ∏è  Deleting webhook...")
    response = requests.post(f"{BASE_URL}/deleteWebhook?drop_pending_updates=true")
    data = response.json()
    
    if data["ok"]:
        print("‚úÖ Webhook successfully deleted!")
        return True
    else:
        print(f"‚ùå Failed to delete webhook: {data}")
        return False

if __name__ == "__main__":
    print("üîç Checking Telegram Bot webhook status...\n")
    
    webhook_url = check_webhook()
    
    if webhook_url:
        print(f"\n‚ö†Ô∏è  WARNING: Webhook is SET to: {webhook_url}")
        print("This will conflict with polling mode on Render!")
        
        confirm = input("\nDelete webhook? (yes/no): ")
        if confirm.lower() in ['yes', 'y']:
            delete_webhook()
            print("\n‚úÖ Done! Now bot can use polling mode.")
        else:
            print("\n‚ùå Webhook not deleted. Bot will continue to conflict.")
    else:
        print("\n‚úÖ No webhook set. Polling mode should work fine!")
