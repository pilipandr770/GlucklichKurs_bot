"""
Handler –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ/—á–∞—Ç—ñ –∑ —É—Ä–æ–∫–∞–º–∏
Coach agent –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏
"""
from aiogram import Router, types, F
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from ..utils.openai_client import chat_completion
from ..utils.agent_loader import get_agent_prompt
from ..utils.lesson_loader import get_full_lessons_context
from ..utils.safety_guards import apply_guard
import os

router = Router()

# ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –∑ —É—Ä–æ–∫–∞–º–∏ (–∑ .env)
PAID_CHANNEL_ID = int(os.getenv("PAID_CHANNEL_ID", "0"))

@router.message(F.chat.id == PAID_CHANNEL_ID)
async def channel_message(msg: types.Message):
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ/—á–∞—Ç—ñ –∑ —É—Ä–æ–∫–∞–º–∏.
    Coach agent –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –∑ –ø–æ–≤–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∫—É—Ä—Å—É.
    """
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø—É—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç—ñ–≤
    if not msg.text or msg.from_user.is_bot:
        return
    
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ service messages (pinned, joined, etc.)
    if msg.text.startswith("/"):
        return
    
    print(f"üìù Channel message from {msg.from_user.id}: {msg.text[:50]}...")
    print(f"üîµ [DEBUG] chat_id={msg.chat.id}, PAID_CHANNEL_ID={PAID_CHANNEL_ID}")
    
    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ Safety Guard (coach type)
    is_allowed, rejection_message = await apply_guard(msg.text, "coach")
    
    if not is_allowed:
        await msg.reply(rejection_message)
        return
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ coach_agent –∑ –ø–æ–≤–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —É—Ä–æ–∫—ñ–≤
    coach_prompt = get_agent_prompt("coach_agent")
    lessons_context = get_full_lessons_context()
    
    print(f"üîµ [DEBUG] coach_prompt length: {len(coach_prompt)} chars")
    print(f"üîµ [DEBUG] lessons_context length: {len(lessons_context)} chars")
    print(f"üîµ [DEBUG] First 200 chars of coach_prompt: {coach_prompt[:200]}")
    
    messages = [
        {"role": "system", "content": coach_prompt},
        {"role": "system", "content": lessons_context},
        {"role": "user", "content": msg.text}
    ]
    
    try:
        resp = chat_completion(messages)
        answer = resp.choices[0].message.content
        
        # –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥—É–∂–µ –¥–æ–≤–≥–∞, —Ä–æ–∑–¥—ñ–ª—è—î–º–æ
        if len(answer) > 4000:
            parts = []
            current = ""
            for line in answer.split("\n"):
                if len(current) + len(line) + 1 < 4000:
                    current += line + "\n"
                else:
                    parts.append(current)
                    current = line + "\n"
            if current:
                parts.append(current)
            
            for part in parts:
                await msg.reply(part)
        else:
            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ reply (–ø—Ä–∏–≤'—è–∑—É—î–º–æ –¥–æ –ø–∏—Ç–∞–Ω–Ω—è)
            await msg.reply(answer)
    
    except Exception as e:
        print(f"‚ùå Error in channel handler: {e}")
        await msg.reply("‚ùå –í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

@router.my_chat_member(
    ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER)
)
async def bot_added_to_channel(event: types.ChatMemberUpdated):
    """–ë–æ—Ç –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–∞–Ω–∞–ª—É/—á–∞—Ç—É"""
    print(f"‚úÖ Bot added to chat {event.chat.id} ({event.chat.title})")

@router.my_chat_member(
    ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER)
)
async def bot_removed_from_channel(event: types.ChatMemberUpdated):
    """–ë–æ—Ç –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –∫–∞–Ω–∞–ª—É/—á–∞—Ç—É"""
    print(f"‚ùå Bot removed from chat {event.chat.id} ({event.chat.title})")
