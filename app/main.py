# file: app/main.py
"""
–û–±'—î–¥–Ω–∞–Ω–∏–π –∑–∞–ø—É—Å–∫ FastAPI (webhooks) + Telegram Bot –≤ –æ–¥–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ
"""
import asyncio
import os
import threading
from dotenv import load_dotenv

load_dotenv()

def run_fastapi():
    """–ó–∞–ø—É—Å–∫–∞—î FastAPI —Å–µ—Ä–≤–µ—Ä –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    import uvicorn
    from app.web.server import app
    
    port = int(os.getenv("PORT", 8000))
    print(f"üåê Starting FastAPI on port {port}...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ uvicorn –±–µ–∑ asyncio (–≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ)
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=port,
        log_level="info"
    )

async def run_bot():
    """–ó–∞–ø—É—Å–∫–∞—î Telegram –±–æ—Ç–∞"""
    from aiogram import Bot, Dispatcher
    from aiogram.enums import ParseMode
    from aiogram.client.default import DefaultBotProperties
    from app.bot.handlers import start, text, voice, buy, legal, channel
    from app.bot.utils.reminders import start_reminders
    
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    
    async def send_reminder(bot: Bot, uid: int):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            await bot.send_message(
                uid, 
                "‚ú® <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è</b>\n\n"
                "–í—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫ —É–∂–µ –¥–∞–≤ —Ç–æ–±—ñ –≤—ñ–¥—á—É—Ç—Ç—è –∫–æ—Ä–∏—Å—Ç—ñ? "
                "–ü–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ ¬´10 –∫—Ä–æ–∫—ñ–≤ –¥–æ —â–∞—Å—Ç—è¬ª –¥–æ–ø–æ–º–æ–∂–µ –∑–∞–∫—Ä—ñ–ø–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
                "–ù–∞—Ç–∏—Å–Ω–∏ /pay, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —É—Ä–æ–∫—ñ–≤."
            )
        except Exception as e:
            print(f"Failed to send reminder to {uid}: {e}")
    
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    
    # –ö–†–ò–¢–ò–ß–ù–û: –í–∏–¥–∞–ª—è—î–º–æ webhook –ø–µ—Ä–µ–¥ polling
    print("üîÑ Deleting webhook (if exists)...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ Webhook deleted successfully")
    except Exception as e:
        print(f"‚ö†Ô∏è  Warning: Failed to delete webhook: {e}")
    
    # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö pending operations
    await asyncio.sleep(2)
    
    dp = Dispatcher()
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏ (channel –º–∞—î –±—É—Ç–∏ –ü–ï–†–ï–î text, —â–æ–± —Å–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ chat_id)
    dp.include_router(start.router)
    dp.include_router(buy.router)
    dp.include_router(legal.router)
    dp.include_router(channel.router)  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É/—á–∞—Ç—É
    dp.include_router(text.router)      # –ü—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    dp.include_router(voice.router)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    await start_reminders(lambda uid: send_reminder(bot, uid))
    
    print("ü§ñ Bot is running...")
    await dp.start_polling(bot)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –∑–∞–ø—É—Å–∫–∞—î FastAPI —ñ Bot"""
    print("üöÄ Starting Gl√ºckenKurs Bot + Web Server...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ FastAPI –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    fastapi_thread = threading.Thread(target=run_fastapi, daemon=True)
    fastapi_thread.start()
    
    # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è graceful shutdown —Å—Ç–∞—Ä–æ–≥–æ –¥–µ–ø–ª–æ—é (Render)
    import time
    print("‚è≥ Waiting 10 seconds for old deployment to shutdown...")
    time.sleep(10)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    asyncio.run(run_bot())

if __name__ == "__main__":
    main()
